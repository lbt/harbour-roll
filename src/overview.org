harbour-roll

main, initialises QML object "Roll"


* roll : a GLItem : a QQuickItem

handles user input from QML

very app specific

prep() is where GL one-time setup is done

Calls bullet.setupGL(m_program_dice);

BAD:
  m_runner setup
  bullet restore state
  create GL_ARRAY_BUFFER
  setRunning()

render() is where the GL rendering is done

BAD:
camera update (move camera to world)
light position update (move lights to world)
bind program (move to world-render and let it control that)
setup lighting uniforms (ditto, world-render can optimise order of programs)
debug render (ditto)

** glitem

allows rendering of GL via prep()/render() in the paint() call

* Tasks

http://bulletphysics.org/mediawiki-1.5.8/index.php/Canonical_Game_Loop

Create QML and splash

Create world and runner

Connect world and runner to QML : in GLitem.prep()

Setup GL for world items : in GLitem.prep()

Render world during refresh : in GLitem.render()

Pass UI to world at end of refresh using queue

Start world runner

* Threads

** Main

** Render calls glitem

** WorldRunner

* Components

** AssetStore
Things are keyed by name and typically a named vao/collisionshape
will be used together.

The Asset Store creates/owns everything in it.

Creates:
  * VAO
  * Texture
  * shader
  * renderables
  * btCollisionShapes
  * curves

There is a problem that some things in the AssetStore depend on the current world.
Fix this.

** Renderable
  Something that appears onscreen
  * shaders (GLPrograms)
  * Asset/VAO
  * Asset/Texture
methods:
  + render()

** WorldBuilder
   reads a scene, aiMeshes, json etc
  1) primes the AssetStore with obj
  2) uses json to create world objects
  3) creates objects, adds to world

** World
WorldItems add themselves to a world.

Containers
 * physicsWorld
 * WorldItem
 * physicsThread
 * Shaders
 * Lights

methods
 + render()
   renders world objects by shader groups
 + step()

** WorldItem
  World objects

contains:
 * motion list
 * 0+ renderable (invisible objects etc)
 * world membership management

methods
 + register()
   in the world ??
 + render()

*** Light

Lights have various attributes which are passed to GLSL (col, intensity etc)
They have a light manager which they update each tick and which provides position/direction.

 * Point / Directional

Note that Lights are WIs and can be manipulated by Motions - eg to Follow items, curves or LookAt (eventually useful for spotlights)

*** Camera
Cameras are simply WIs with a projViewMatrix() method and (eventually) special debug draw.
They have special addToWorld() so the World can enumerate and activate them easily.

** Motion
WorldItems can have Motion.

Motions can be chained so an item has a Motion which then has another motion applied.
This allows, eg, an OrbitMotion to be applied after a FollowMotion to make a WI orbit an object.

Motions are owned by the World.
Since one Motion could (by default) be used by multiple WIs the World iterates through all Motions to do updates.
(This is not done properly yet - it just follows WI->motion->motion chains so will execute runStep twice for reused Motions and there are issues with using a single 'parent')

*** BaseMotion
Simple static motion

*** PhysicsMotion
A Motion which is a simple wrapper around a btRigidBody

*** FollowMotion
Follows another WI at a given vector offset

*** OrbitMotion
Follows a circular path

*** LinearMotion
Simple linear velocity.

*** CurveMotion
Follows a curve (obtained from asset library)

Curves are used direct from the VAO
On intialisation the line segments are read to create an distance@point list
This is used to determine which point pair a given distance is between.
Extrapolation is done in a linear manner.

*** LookAtMotion
This Motion simply adjusts the Transform to look at either another WI or a point.
This is especially useful for Cameras.

*** DelayedFollow (TODO)
A circular buffer of delayFrames worth of Transforms to provide laggy motion.
This Follows another WI but has a circular buffer of Transforms so it's always 'n' framses behind.

** Shaders


** Game objects : World objects + sig/slots

** Paths
Mesh

** GLSL variables
These variables will automatically be populated if used

uniform mat4 worldMatrixU;          // ??
uniform mat4 projViewMatrixU;       // Standard pvm
uniform vec3 eyeWorldPosU;          // Eye/Camera position


uniform sampler2D textureU;
uniform DirectionalLight directionalLights[n];
uniform PointLight pointLights[n];

uniform float matSpecularIntensityU;
uniform float specularPowerU;




* Methods

** setupGL
Called with a GLcontext when there's a new world
Initiated by the world. AssetStore does this for textures (which is bad)

** render
Actual render

** clearGL
Clear any GL usage. Used when changing worlds


* Blender

To get the correct mesh orientation set the export to
Forward: Y
Up: -Z
Include Normals
DO NOT tick 'triangulate' - Assimp does it better
