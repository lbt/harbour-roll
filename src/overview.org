harbour-roll

main, initialises QML object "Roll"


* roll : a GLItem : a QQuickItem

handles user input from QML

very app specific

prep() is where GL one-time setup is done

Calls bullet.setupGL(m_program_dice);

BAD:
  m_runner setup
  bullet restore state
  create GL_ARRAY_BUFFER
  setRunning()

render() is where the GL rendering is done

BAD:
camera update (move camera to world)
light position update (move lights to world)
bind program (move to world-render and let it control that)
setup lighting uniforms (ditto, world-render can optimise order of programs)
debug render (ditto)

* glitem

allows rendering of GL via prep()/render() in the paint() call


*






New

http://bulletphysics.org/mediawiki-1.5.8/index.php/Canonical_Game_Loop

Create QML and splash

Create world and runner

Connect world and runner to QML : in GLitem.prep()

Setup GL for world items : in GLitem.prep()

Render world during refresh : in GLitem.render()

Pass UI to world at end of refresh using queue

Start world runner


* AssetStore
Things are keyed by name and typically a named vao/collisionshape
will be used together.

The Asset Store creates/owns everything in it.

Creates:
  * VAO
  * Texture
  * shader
  * renderables
  * btCollisionShapes
  * curves

There is a problem that some things in the AssetStore depend on the current world.
Fix this.

* Renderable
  Something that appears onscreen
  * shaders (GLPrograms)
  * Asset/VAO
  * Asset/Texture
methods:
  + render()

* WorldBuilder
  reads a scene, aiMeshes, json etc
 1) primes the AssetStore with obj
 2) uses json to create world objects
 3) creates objects, adds to world

* World
WorldItems add themselves to a world.

Containers
 * physicsWorld
 * WorldItem
 * physicsThread
 * Shaders
 * Lights

methods
 + render()
   renders world objects by shader groups
 + step()

* WorldItem
  World objects

contains:
 * geometry
 * physics
 * 0+ renderable (invisible objects etc)
 * world

methods
 + register()
   in the world ??
 + render()

* Physics
simple wrapper around a btRigidBody


* Light
Lights have various attributes which are passed to GLSL (col, intensity etc)
They have a light manager which they update each tick and which provides position/direction.

 * Point / Directional

* Camera



* Shaders



* Game objects : World objects + sig/slots


* Paths
 Mesh



* GLSL variables
These variables will automatically be populated if used

uniform mat4 worldMatrixU;          // ??
uniform mat4 projViewMatrixU;       // Standard pvm
uniform vec3 eyeWorldPosU;          // Eye/Camera position


uniform sampler2D textureU;
uniform DirectionalLight directionalLights[n];
uniform PointLight pointLights[n];

uniform float matSpecularIntensityU;
uniform float specularPowerU;
